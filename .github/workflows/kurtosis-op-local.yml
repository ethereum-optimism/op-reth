# Runs simple OP stack setup in Kurtosis

name: Run kurtosis (local images)

on:
  workflow_dispatch:
    inputs:
      args:
        type: choice
        required: true
        description: "Kurtosis args file to use"
        options:
          - kurtosis_op_network_params_local_no_op_geth
          - kurtosis_op_network_params_local_no_op_reth
          - kurtosis_op_network_params_local_op_reth_sequencer
          - kurtosis_op_network_params_local
        default: kurtosis_op_network_params_local
      op-node-repo:
        type: string
        required: true
        description: "An optimizm repo (clone) to use for op-node"
        default: https://github.com/ethereum-optimism/optimism.git

      op-node-ref:
        type: string
        required: true
        description: "op-node git ref (branch/commit) to use"
        default: develop
      
      op-geth-repo:
        type: string
        required: true
        description: "An op-geth repo (clone) to use for op-geth"
        default: https://github.com/ethereum-optimism/op-geth.git

      op-geth-ref:
        type: string
        required: true
        description: "op-geth git ref (branch/commit) to use"
        default: optimism

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  prepare-op-geth:
    name: Prepare op-geth docker image
    uses: ./.github/workflows/prepare-op-image.yml
    with:
      repo: ${{ inputs.op-geth-repo }}
      ref: ${{ inputs.op-geth-ref }}
      image_tag: ghcr.io/ethereum-optimism/op-geth:kurtosis-ci
      artifact_name: op_geth_image

  prepare-op-node:
    name: Prepare op-node docker image
    uses: ./.github/workflows/prepare-op-image.yml
    with:
      repo: ${{ inputs.op-node-repo }}
      ref: ${{ inputs.op-node-ref }}
      dockerfile: ops/docker/op-stack-go/Dockerfile
      target: op-node-target
      image_tag: ghcr.io/ethereum-optimism/op-node:kurtosis-ci
      artifact_name: op_node_image

  prepare-op-reth:
    name: Prepare op-reth docker image
    uses: ./.github/workflows/prepare-op-reth.yml
    with:
      image_tag: ghcr.io/paradigmxyz/op-reth:kurtosis-ci
      binary_name: op-reth
      cargo_features: optimism,asm-keccak
      cargo_package: crates/optimism/bin/Cargo.toml

  test:
    timeout-minutes: 60
    strategy:
      fail-fast: false
    name: Kurtosis (${{ inputs.args }})
    runs-on: ubuntu-latest
    # We store the enclave name for easy access here
    env:
      ENCLAVE_NAME: op-devnet
    needs:
      - prepare-op-reth
      - prepare-op-geth
      - prepare-op-node
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Download docker image artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: artifacts--*
          merge-multiple: true
          path: /tmp

      - name: Load Docker images
        run: |
          # Load all images from artifacts
          docker load -i /tmp/op_reth_image.tar
          docker load -i /tmp/op_geth_image.tar
          docker load -i /tmp/op_node_image.tar
          
          # List available images
          docker image ls -a

      - name: Run kurtosis
        run: kurtosis run --enclave $ENCLAVE_NAME github.com/ethpandaops/optimism-package --args-file .github/assets/${{ inputs.args }}.yaml

      - name: Assert that clients advance
        run: ./.github/scripts/kurtosis-check-enclave-block-creation.sh $ENCLAVE_NAME

      - name: Dump kurtosis logs on failure
        if: ${{ failure() }}
        run: ./.github/scripts/kurtosis-dump-logs.sh $ENCLAVE_NAME

  notify-on-error:
    needs: 
      - test
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Slack Webhook Action
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: "Failed run: https://github.com/paradigmxyz/reth/actions/runs/${{ github.run_id }}"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
